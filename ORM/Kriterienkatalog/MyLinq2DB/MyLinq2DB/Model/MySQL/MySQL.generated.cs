//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DataModels.MySQL
{
	/// <summary>
	/// Database       : Chinook
	/// Data Source    : localhost
	/// Server Version : 8.0.19
	/// </summary>
	public partial class ChinookDB : LinqToDB.Data.DataConnection
	{
		public ITable<Album>         Albums         { get { return this.GetTable<Album>(); } }
		public ITable<Artist>        Artists        { get { return this.GetTable<Artist>(); } }
		public ITable<Customer>      Customers      { get { return this.GetTable<Customer>(); } }
		public ITable<Employee>      Employees      { get { return this.GetTable<Employee>(); } }
		public ITable<Genre>         Genres         { get { return this.GetTable<Genre>(); } }
		public ITable<Invoice>       Invoices       { get { return this.GetTable<Invoice>(); } }
		public ITable<InvoiceLine>   InvoiceLines   { get { return this.GetTable<InvoiceLine>(); } }
		public ITable<MediaType>     MediaTypes     { get { return this.GetTable<MediaType>(); } }
		public ITable<Playlist>      Playlists      { get { return this.GetTable<Playlist>(); } }
		public ITable<PlaylistTrack> PlaylistTracks { get { return this.GetTable<PlaylistTrack>(); } }
		public ITable<Track>         Tracks         { get { return this.GetTable<Track>(); } }

		public ChinookDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public ChinookDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table("Album")]
	public partial class Album
	{
		[PrimaryKey, NotNull] public int    AlbumId  { get; set; } // int
		[Column,     NotNull] public string Title    { get; set; } // varchar(160)
		[Column,     NotNull] public int    ArtistId { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_AlbumArtistId
		/// </summary>
		[Association(ThisKey="ArtistId", OtherKey="ArtistId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_AlbumArtistId", BackReferenceName="AlbumArtistIds")]
		public Artist Artist { get; set; }

		/// <summary>
		/// FK_TrackAlbumId_BackReference
		/// </summary>
		[Association(ThisKey="AlbumId", OtherKey="AlbumId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Track> TrackAlbumIds { get; set; }

		#endregion
	}

	[Table("Artist")]
	public partial class Artist
	{
		[PrimaryKey, NotNull    ] public int    ArtistId { get; set; } // int
		[Column,        Nullable] public string Name     { get; set; } // varchar(120)

		#region Associations

		/// <summary>
		/// FK_AlbumArtistId_BackReference
		/// </summary>
		[Association(ThisKey="ArtistId", OtherKey="ArtistId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Album> AlbumArtistIds { get; set; }

		#endregion
	}

	[Table("Customer")]
	public partial class Customer
	{
		[PrimaryKey, NotNull    ] public int    CustomerId   { get; set; } // int
		[Column,     NotNull    ] public string FirstName    { get; set; } // varchar(40)
		[Column,     NotNull    ] public string LastName     { get; set; } // varchar(20)
		[Column,        Nullable] public string Company      { get; set; } // varchar(80)
		[Column,        Nullable] public string Address      { get; set; } // varchar(70)
		[Column,        Nullable] public string City         { get; set; } // varchar(40)
		[Column,        Nullable] public string State        { get; set; } // varchar(40)
		[Column,        Nullable] public string Country      { get; set; } // varchar(40)
		[Column,        Nullable] public string PostalCode   { get; set; } // varchar(10)
		[Column,        Nullable] public string Phone        { get; set; } // varchar(24)
		[Column,        Nullable] public string Fax          { get; set; } // varchar(24)
		[Column,     NotNull    ] public string Email        { get; set; } // varchar(60)
		[Column,        Nullable] public int?   SupportRepId { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_InvoiceCustomerId_BackReference
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="CustomerId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Invoice> InvoiceCustomerIds { get; set; }

		/// <summary>
		/// FK_CustomerSupportRepId
		/// </summary>
		[Association(ThisKey="SupportRepId", OtherKey="EmployeeId", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_CustomerSupportRepId", BackReferenceName="CustomerSupportRepIds")]
		public Employee SupportRep { get; set; }

		#endregion
	}

	[Table("Employee")]
	public partial class Employee
	{
		[PrimaryKey, NotNull    ] public int       EmployeeId { get; set; } // int
		[Column,     NotNull    ] public string    LastName   { get; set; } // varchar(20)
		[Column,     NotNull    ] public string    FirstName  { get; set; } // varchar(20)
		[Column,        Nullable] public string    Title      { get; set; } // varchar(30)
		[Column,        Nullable] public int?      ReportsTo  { get; set; } // int
		[Column,        Nullable] public DateTime? BirthDate  { get; set; } // datetime
		[Column,        Nullable] public DateTime? HireDate   { get; set; } // datetime
		[Column,        Nullable] public string    Address    { get; set; } // varchar(70)
		[Column,        Nullable] public string    City       { get; set; } // varchar(40)
		[Column,        Nullable] public string    State      { get; set; } // varchar(40)
		[Column,        Nullable] public string    Country    { get; set; } // varchar(40)
		[Column,        Nullable] public string    PostalCode { get; set; } // varchar(10)
		[Column,        Nullable] public string    Phone      { get; set; } // varchar(24)
		[Column,        Nullable] public string    Fax        { get; set; } // varchar(24)
		[Column,        Nullable] public string    Email      { get; set; } // varchar(60)

		#region Associations

		/// <summary>
		/// FK_CustomerSupportRepId_BackReference
		/// </summary>
		[Association(ThisKey="EmployeeId", OtherKey="SupportRepId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Customer> CustomerSupportRepIds { get; set; }

		/// <summary>
		/// FK_EmployeeReportsTo
		/// </summary>
		[Association(ThisKey="ReportsTo", OtherKey="EmployeeId", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeeReportsTo", BackReferenceName="FkEmployeeReportsToBackReferences")]
		public Employee EmployeeReportsTo { get; set; }

		/// <summary>
		/// FK_EmployeeReportsTo_BackReference
		/// </summary>
		[Association(ThisKey="EmployeeId", OtherKey="ReportsTo", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Employee> FkEmployeeReportsToBackReferences { get; set; }

		#endregion
	}

	[Table("Genre")]
	public partial class Genre
	{
		[PrimaryKey, NotNull    ] public int    GenreId { get; set; } // int
		[Column,        Nullable] public string Name    { get; set; } // varchar(120)

		#region Associations

		/// <summary>
		/// FK_TrackGenreId_BackReference
		/// </summary>
		[Association(ThisKey="GenreId", OtherKey="GenreId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Track> TrackGenreIds { get; set; }

		#endregion
	}

	[Table("Invoice")]
	public partial class Invoice
	{
		[PrimaryKey, NotNull    ] public int      InvoiceId         { get; set; } // int
		[Column,     NotNull    ] public int      CustomerId        { get; set; } // int
		[Column,     NotNull    ] public DateTime InvoiceDate       { get; set; } // datetime
		[Column,        Nullable] public string   BillingAddress    { get; set; } // varchar(70)
		[Column,        Nullable] public string   BillingCity       { get; set; } // varchar(40)
		[Column,        Nullable] public string   BillingState      { get; set; } // varchar(40)
		[Column,        Nullable] public string   BillingCountry    { get; set; } // varchar(40)
		[Column,        Nullable] public string   BillingPostalCode { get; set; } // varchar(10)
		[Column,     NotNull    ] public decimal  Total             { get; set; } // decimal(10,2)

		#region Associations

		/// <summary>
		/// FK_InvoiceCustomerId
		/// </summary>
		[Association(ThisKey="CustomerId", OtherKey="CustomerId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_InvoiceCustomerId", BackReferenceName="InvoiceCustomerIds")]
		public Customer Customer { get; set; }

		/// <summary>
		/// FK_InvoiceLineInvoiceId_BackReference
		/// </summary>
		[Association(ThisKey="InvoiceId", OtherKey="InvoiceId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<InvoiceLine> InvoiceLineInvoiceIds { get; set; }

		#endregion
	}

	[Table("InvoiceLine")]
	public partial class InvoiceLine
	{
		[PrimaryKey, NotNull] public int     InvoiceLineId { get; set; } // int
		[Column,     NotNull] public int     InvoiceId     { get; set; } // int
		[Column,     NotNull] public int     TrackId       { get; set; } // int
		[Column,     NotNull] public decimal UnitPrice     { get; set; } // decimal(10,2)
		[Column,     NotNull] public int     Quantity      { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_InvoiceLineInvoiceId
		/// </summary>
		[Association(ThisKey="InvoiceId", OtherKey="InvoiceId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_InvoiceLineInvoiceId", BackReferenceName="InvoiceLineInvoiceIds")]
		public Invoice Invoice { get; set; }

		/// <summary>
		/// FK_InvoiceLineTrackId
		/// </summary>
		[Association(ThisKey="TrackId", OtherKey="TrackId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_InvoiceLineTrackId", BackReferenceName="InvoiceLineTrackIds")]
		public Track Track { get; set; }

		#endregion
	}

	[Table("MediaType")]
	public partial class MediaType
	{
		[PrimaryKey, NotNull    ] public int    MediaTypeId { get; set; } // int
		[Column,        Nullable] public string Name        { get; set; } // varchar(120)

		#region Associations

		/// <summary>
		/// FK_TrackMediaTypeId_BackReference
		/// </summary>
		[Association(ThisKey="MediaTypeId", OtherKey="MediaTypeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Track> TrackMediaTypeIds { get; set; }

		#endregion
	}

	[Table("Playlist")]
	public partial class Playlist
	{
		[PrimaryKey, NotNull    ] public int    PlaylistId { get; set; } // int
		[Column,        Nullable] public string Name       { get; set; } // varchar(120)

		#region Associations

		/// <summary>
		/// FK_PlaylistTrackPlaylistId_BackReference
		/// </summary>
		[Association(ThisKey="PlaylistId", OtherKey="PlaylistId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PlaylistTrack> PlaylistTrackPlaylistIds { get; set; }

		#endregion
	}

	[Table("PlaylistTrack")]
	public partial class PlaylistTrack
	{
		[PrimaryKey(1), NotNull] public int PlaylistId { get; set; } // int
		[PrimaryKey(2), NotNull] public int TrackId    { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_PlaylistTrackPlaylistId
		/// </summary>
		[Association(ThisKey="PlaylistId", OtherKey="PlaylistId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PlaylistTrackPlaylistId", BackReferenceName="PlaylistTrackPlaylistIds")]
		public Playlist Playlist { get; set; }

		/// <summary>
		/// FK_PlaylistTrackTrackId
		/// </summary>
		[Association(ThisKey="TrackId", OtherKey="TrackId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_PlaylistTrackTrackId", BackReferenceName="PlaylistTrackTrackIds")]
		public Track Track { get; set; }

		#endregion
	}

	[Table("Track")]
	public partial class Track
	{
		[PrimaryKey, NotNull    ] public int     TrackId      { get; set; } // int
		[Column,     NotNull    ] public string  Name         { get; set; } // varchar(200)
		[Column,        Nullable] public int?    AlbumId      { get; set; } // int
		[Column,     NotNull    ] public int     MediaTypeId  { get; set; } // int
		[Column,        Nullable] public int?    GenreId      { get; set; } // int
		[Column,        Nullable] public string  Composer     { get; set; } // varchar(220)
		[Column,     NotNull    ] public int     Milliseconds { get; set; } // int
		[Column,        Nullable] public int?    Bytes        { get; set; } // int
		[Column,     NotNull    ] public decimal UnitPrice    { get; set; } // decimal(10,2)

		#region Associations

		/// <summary>
		/// FK_TrackAlbumId
		/// </summary>
		[Association(ThisKey="AlbumId", OtherKey="AlbumId", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_TrackAlbumId", BackReferenceName="TrackAlbumIds")]
		public Album Album { get; set; }

		/// <summary>
		/// FK_TrackGenreId
		/// </summary>
		[Association(ThisKey="GenreId", OtherKey="GenreId", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_TrackGenreId", BackReferenceName="TrackGenreIds")]
		public Genre Genre { get; set; }

		/// <summary>
		/// FK_InvoiceLineTrackId_BackReference
		/// </summary>
		[Association(ThisKey="TrackId", OtherKey="TrackId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<InvoiceLine> InvoiceLineTrackIds { get; set; }

		/// <summary>
		/// FK_TrackMediaTypeId
		/// </summary>
		[Association(ThisKey="MediaTypeId", OtherKey="MediaTypeId", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TrackMediaTypeId", BackReferenceName="TrackMediaTypeIds")]
		public MediaType MediaType { get; set; }

		/// <summary>
		/// FK_PlaylistTrackTrackId_BackReference
		/// </summary>
		[Association(ThisKey="TrackId", OtherKey="TrackId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<PlaylistTrack> PlaylistTrackTrackIds { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Album Find(this ITable<Album> table, int AlbumId)
		{
			return table.FirstOrDefault(t =>
				t.AlbumId == AlbumId);
		}

		public static Artist Find(this ITable<Artist> table, int ArtistId)
		{
			return table.FirstOrDefault(t =>
				t.ArtistId == ArtistId);
		}

		public static Customer Find(this ITable<Customer> table, int CustomerId)
		{
			return table.FirstOrDefault(t =>
				t.CustomerId == CustomerId);
		}

		public static Employee Find(this ITable<Employee> table, int EmployeeId)
		{
			return table.FirstOrDefault(t =>
				t.EmployeeId == EmployeeId);
		}

		public static Genre Find(this ITable<Genre> table, int GenreId)
		{
			return table.FirstOrDefault(t =>
				t.GenreId == GenreId);
		}

		public static Invoice Find(this ITable<Invoice> table, int InvoiceId)
		{
			return table.FirstOrDefault(t =>
				t.InvoiceId == InvoiceId);
		}

		public static InvoiceLine Find(this ITable<InvoiceLine> table, int InvoiceLineId)
		{
			return table.FirstOrDefault(t =>
				t.InvoiceLineId == InvoiceLineId);
		}

		public static MediaType Find(this ITable<MediaType> table, int MediaTypeId)
		{
			return table.FirstOrDefault(t =>
				t.MediaTypeId == MediaTypeId);
		}

		public static Playlist Find(this ITable<Playlist> table, int PlaylistId)
		{
			return table.FirstOrDefault(t =>
				t.PlaylistId == PlaylistId);
		}

		public static PlaylistTrack Find(this ITable<PlaylistTrack> table, int PlaylistId, int TrackId)
		{
			return table.FirstOrDefault(t =>
				t.PlaylistId == PlaylistId &&
				t.TrackId    == TrackId);
		}

		public static Track Find(this ITable<Track> table, int TrackId)
		{
			return table.FirstOrDefault(t =>
				t.TrackId == TrackId);
		}
	}
}

#pragma warning restore 1591
